name: Build and push the tagged build to production

on:
  push:
    branches: [ main ]

jobs:
  build-jar:
    runs-on: ubuntu-latest
    outputs:
      jar_version: ${{ steps.bump.outputs.jar_version }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Bump jar version
        id: bump
        run: |
          POMPATH=./
          OLD_VERSION=$(cd $POMPATH && mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BUMP_MODE="none"
          old="$OLD_VERSION"
          parts=( ${old//./ } )
          bv=$((parts[2] + 1))
          NEW_VERSION="${parts[0]}.${parts[1]}.${bv}"
          echo "pom.xml at" $POMPATH "will be bumped from" $OLD_VERSION "to" $NEW_VERSION
          mvn -q versions:set -DnewVersion="${NEW_VERSION}" --file $POMPATH/pom.xml
          echo ::set-output name=jar_version::${NEW_VERSION}
      - name: Compile
        run: mvn -B compile --file pom.xml

      - name: Build a package
        run: mvn -B package --file pom.xml

      - name: Temporarily save jar artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: ${{ github.workspace }}/target/*.jar
          retention-days: 1

  build_push_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v1
        with:
          name: jar-artifact
          path: target/

      - name: Fetch latest version
        id: fetch_version
        run: echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACR_NAME }}
          username: ${{ secrets.ACR_LOGIN }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push production images
        uses: docker/build-push-action@v2
        with:
          username: ${{ secrets.ACR_LOGIN }}
          password: ${{ secrets.ACR_PASSWORD }}
          registry: ${{ secrets.ACR_NAME }}
          repository: contoso-website
          tags: latest
  deploy:
    runs-on: ubuntu-latest
    needs: build_push_image

    steps:
      - uses: actions/checkout@v2

      - name: Install Helm
        uses: Azure/setup-helm@v1
        with:
          version: v3.3.1

      - name: Get AKS Credentials
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: mslearn-gh-pipelines-13971
          cluster-name: contoso-video

      - name: Run Helm Deploy
        run: |
          helm upgrade \
            --install \
            --create-namespace \
            --atomic \
            --wait \
            --namespace staging \
            contoso-website \
            ./kubernetes/contoso-website \
            --set image.repository=${{ secrets.ACR_NAME }} \
            --set dns.name=${{ secrets.DNS_NAME }}